# Use an official Python runtime as a parent image
FROM python:3.12

LABEL maintainer="wania-kazmi"

# Install system dependencies (consider multi-stage build for smaller image)
RUN apt-get update && apt-get install -y build-essential libpq-dev && apt-get clean

# Set the working directory in the container
WORKDIR /code

# Copy the current directory contents into the container at /code
COPY . /code/

# Install Poetry (assuming it's not already installed on your system)
RUN pip install poetry

# Configuration to avoid creating virtual environments inside the container
RUN poetry config virtualenvs.create false

# Install dependencies including development ones
RUN poetry install

# Make port 8085 available to the world outside this container
EXPOSE 9000

# Run the app. CMD can be overridden when starting the container
CMD ["poetry", "run", "uvicorn", "kafka_messages.main:app", "--host", "0.0.0.0", "--reload", "--port", "9000"]


# Use an official Python runtime as a parent image
# FROM python:3.12

# LABEL maintainer="wania-kazmi"
# # Set the working directory in the container
# WORKDIR /code
# # Install system dependencies required for potential Python packages
# RUN apt-get update && apt-get install -y \
#     build-essential \
#     libpq-dev \
#     && rm -rf /var/lib/apt/lists/*


# # Copy the current directory contents into the container at /code
# COPY . /code/

# # Install Poetry
# RUN pip install poetry

# # Configuration to avoid creating virtual environments inside the Docker container
# RUN poetry config virtualenvs.create false

# # Install dependencies including development ones
# RUN poetry install

# # Make port 8085 available to the world outside this container
# EXPOSE 8085

# # Run the app. CMD can be overridden when starting the container
# CMD ["poetry", "run", "uvicorn", "kafka_messages.main:app", "--port", "8085", "--reload"]